FORMAT: 1A
HOST: https://team3.ppdb.me/api

# PPDB 2019-2020


Minimal specification of the API. Optional parameters (with default values) may be added and more information may be included in the responses.
This minimum requirement needs to be implemented to receive live data.


## /users/register


### POST [POST]

+ Request (application/json)


        {
            "username" : "MarkP",
            "firstname": "Mark",
            "lastname": "Peeters",
            "password" : "MarkIsCool420"
        }

+ Response 201 (application/json)

        {
            "username" : "MarkP",
            "firstname": "Mark",
            "lastname": "Peeters",
            "password" : "MarkIsCool420"
        }

+ Request (application/json)

        {
            "username" : "MarkP",
            "firstname": "Mark",
            "lastname": "Peeters",
            "password" : "MP420"
        }

+ Response 400

        {
            "message": {
                "password": [
                    "Field must be at least 8 characters long."
                    ]
                }
        }

## /users/auth

### POST [POST]

Returns an authentication token if login credentials are correct. This token expires after 10 minutes, which means you'll have to log in again.

+ Request (application/json)

        {
            "username" : "MarkP",
            "password" : "MarkIsCool420"
        }

+ Response 200 (application/json)

        {
            "token": "<token>"
        }

+ Request (application/json)

        {
            "username" : "MarkP",
            "password" : "[Invalid password]"
        }

+ Response 401 (application/json)

        {
            "message" : "The server could not verify that you are authorized to access the URL requested. You either supplied the wrong credentials (e.g. a bad password), or your browser doesn't understand how to supply the credentials required."
        }

## /drives

Create a ride. 

### POST [POST]

Locations in latitude-longitude, time in ISO 8601 format in the local timezone. A user token needs to be provided in the Authorization header.

+ Request (application/json)

    + Headers

            Authorization: Bearer <token>

    + Body

            {
                "from": [51.130215, 4.571509],
                "to": [51.184170, 4.419310],
                "passenger-places": 3,
                "arrive-by": "2020-02-12T10:00:00.00"
            }

+ Response 201 (application/json)

    + Headers

            Location: /drives/2

    + Body

            {
                "id": 2,
                "driver-id": 14,
                "passenger-ids": [],
                "passenger-places": 3,
                "from": [51.130215, 4.571509],
                "to": [51.184170, 4.419310],
                "arrive-by": "2020-02-12T10:00:00.00"
            }


+ Request (application/json)

    + Body

            {
                "from": [51.130215, 4.571509],
                "to": [51.184170, 4.419310],
                "arrive-by": "2020-02-12T10:00:00.00"
            }

+ Response 401


## /drives/{drive_id}

Get details about a given ride.

+ Parameters
    + drive_id (number) - ID of the Drive in the form of an integer.


### GET [GET]

The field "passenger-places" indicates the total amount of passengers that can be present on the ride. To get the amount of free places, subtract the amount of users in "passenger-ids".

+ Response 200 (application/json)

        {
            "id": 2,
            "driver-id": 14,
            "passenger-ids": [],
            "passenger-places": 3,
            "from": [51.130215, 4.571509],
            "to": [51.184170, 4.419310],
            "arrive-by": "2020-02-12T10:00:00.00"
        }


## /drives/{drive_id}/passengers

Get the passenger-ids and names of a given ride.

+ Parameters
    + drive_id (number) - ID of the Drive in the form of an integer.


### GET [GET]

+ Response 200 (application/json)

        [
            {
                "id": 14,
                "username": "MarkP"
            }
        ]



## /drives/{drive_id}/passenger-requests

+ Parameters
    + drive_id (number) - ID of the Drive in the form of an integer.


### GET [GET]


The get requests always returns true, since we do not work with passenger requests.

+ Request (application/json)

    + Headers
    
            Authorization: Bearer <token>
    
+ Response 200 (application/json)

        [
            {
                "id": 14,
                "username": "MarkP",
                "status": "pending",
                "time-created": "2020-02-10T11:35:12.58"
            }
        ]


### POST [POST]

The post request adds the given passenger to the given ride. It returns 201 success in case the subscription of a passenger to a ride succeeded. If not, code 200 is returned with status 'rejected'. In this case a reason is given for the rejection. This can either be because of a duplicate request or because there is no place left in the car.

+ Request (application/json)

    + Headers

            Authorization: Bearer <token>


+ Response 201 (application/json)

    + Headers

            Location: /drives/1/passenger-requests/14

    + Body

            {
                "status": "rejected",
                "reason": "duplicate_request"
            }


## /drives/{drive_id}/passenger-requests/{user_id}

+ Parameters
    + drive_id (number) - ID of the Drive in the form of an integer.
    + user_id (number) - ID of the user requesting to join.

### POST [POST]

Check for a given passenger and ride whether or not this passenger has joined the right or not. If the passenger joined the ride, 'accepted' will be returned. In the other case 'rejected' will be returned.


+ Request (application/json)

    + Headers

            Authorization: Bearer <token>

    + Body

            {
                "action": "accept"
            }


+ Response 200 (application/json)

    + Body

            {
                "status": "accepted"
            }



## /drives/search{?from}{?to}{?arrive_by}{?limit}

These are the basic parameters of search. Specific search queries can be supported, e.g.: max-from-distance, max-to-distance, max-time-difference (before and/or after), ... .

<b><u>Important!</u>
Since this application supports 'campus carpool', one of the endpoints of a ride is intended to be a campus. This means that a search with both 'to' and 'from' given that doesn't provide a location (in the close neighbourhood) of a campus as one of the endpoints won't give any results.  
</b>

### GET [GET]

+ Parameters

    + from (optional, coords, `51.130215,4.571509`) ... Find rides that can pick up a person from this location. 
    + to (optional, coords, `51.184170,4.419310`) ... Find rides that can drop off a person at this location. 
    + arrive_by (optional, time, `2020-02-12T9:30:00.00`) ... Time by which the person should arrive at their location.
    + limit (optional, number) - Amount of results to return (maximum 25).
        + default: `5`


+ Response 200 (application/json)

        [
            {
                "id": 1,
                "driver-id": 12,
                "passenger-ids": [14],
                "from": [51.094910, 4.610470],
                "to": [51.184170, 4.419310],
                "arrive-by": "2020-02-12T9:45:00.00"
            }
        ]